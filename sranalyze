#!/usr/bin/env php
<?php

const SAVILEROW = '-savilerow';
const MINION = '-minion';
const SAVILEROW_OUTPUT_FILENAME = 'savilerow.csv';
const MINION_OUTPUT_FILENAME = 'minion.csv';

$headFileStr = file('.git/HEAD', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

if (false === $headFileStr) {
    throw new Exception('Not a Git repository.');
}

if (!isset($argv[1]) || !isset($argv[2])) {
    throw new Exception('You need to specify the mode.');
}

if (!in_array($argv[1], [SAVILEROW, MINION], true)) {
    throw new InvalidArgumentException('Invalid mode.');
}

define('BRANCH_NAME', $headFileStr[0]);
define('MODE', $argv[1]);

if (MINION === MODE) {
    minion($argv[2]);
} elseif (SAVILEROW === MODE) {
    savilerow($argv[2], $argv[3]);
}

function minion(string $minionFilename)
{
    if (file_exists(MINION_OUTPUT_FILENAME)) {
        unlink(MINION_OUTPUT_FILENAME);
    }

    $varorderArray = [
        '',
        // '-varorder ldf-random ',
        // '-varorder ldf ',
        // '-varorder random ',
        // '-varorder sdf-random ',
        '-varorder sdf ',
        // '-varorder srf-random ',
        '-varorder srf ',
        '-varorder static '
    ];

    $preprocessArray = [
        '',
        '-preprocess GAC ',
        '-preprocess SAC ',
        '-preprocess SACBounds ',
        // '-preprocess SSAC ',
        // '-preprocess SSACBounds ',
    ];

    $propnodeArray = [
        '',
        '-prop-node GAC ',
        '-prop-node SAC ',
        '-prop-node SACBounds ',
        '-prop-node SSAC ',
        '-prop-node SSACBounds ',
    ];

    $optionsArray = [];
    foreach ($varorderArray as $currentVarorderStr) {
        foreach ($preprocessArray as $currentPreprocessStr) {
            $optionsArray[] = "{$currentVarorderStr}{$currentPreprocessStr}";
        }
    }

    foreach ($optionsArray as $currentOptionStr) {
        $results = [];
        $parsedArray = [];

        $commandStr = "minion {$currentOptionStr} {$minionFilename}";
        echo "{$commandStr}\n";
        exec("{$commandStr}", $results);

        $parsedArray['Options'] = $currentOptionStr;
        $parsedArray['Using seed'] = 'N/A';

        foreach ($results as $currentLineStr) {
            $currentLineArray = explode(':', $currentLineStr);
            if (2 === count($currentLineArray)) {
                $parsedArray[$currentLineArray[0]] = $currentLineArray[1];
            }
        }

        unset($parsedArray['# HG version']);
        unset($parsedArray['# HG last changed date']);
        unset($parsedArray['#  Run at']);
        unset($parsedArray['']);
        unset($parsedArray['#    http']);
        unset($parsedArray['# Input filename']);
        unset($parsedArray['# Command line']);
        append(MINION_OUTPUT_FILENAME, $parsedArray);
    }
}

function savileRow(string $eprimeFilename, string $paramFilename)
{
    if (file_exists(SAVILEROW_OUTPUT_FILENAME)) {
        unlink(SAVILEROW_OUTPUT_FILENAME);
    }

    $srOptionsArray = [
        '',
        '-O0',
        '-O1',
        '-O2',
        '-O3',
        '-deletevars',
        '-aggregate',
        '-nomappers',
        '-minionmappers',
    ];

    foreach ($srOptionsArray as $currentOptionStr) {
        exec("savilerow {$eprimeFilename} {$paramFilename} {$currentOptionStr}");

        $dotInfoArray = file('gapPuzzle2.param.info', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

        $parsedArray = [
            'Branch' => BRANCH_NAME,
            'Options' => $currentOptionStr,
        ];

        foreach ($dotInfoArray as $currentLineStr) {
            $currentLineArray = explode(':', $currentLineStr);
            $parsedArray[$currentLineArray[0]] = $currentLineArray[1];
        }

        append(SAVILEROW_OUTPUT_FILENAME, $parsedArray);
    }
}

function append(string $filename, array $array)
{
    $file = null;
    try {
        $file = fopen($filename, 'c+');
        if (false === $file) {
            throw new Exception('Could not open or create output CSV file.');
        }
        $csvHeaderArray = str_getcsv(fgets($file));
        $csvHeaderInitialLength = count($csvHeaderArray);

        foreach ($array as $keyStr => $valueStr) {
            if (!in_array($keyStr, $csvHeaderArray, true)) {
                $csvHeaderArray[] = $keyStr;
            }
        }

        if (count($csvHeaderArray) !== $csvHeaderInitialLength) {
            rewind($file);
            $headerUpdatedBool = fputcsv($file, $csvHeaderArray);
            if (false === $headerUpdatedBool) {
                throw new Exception('Could not update CSV header.');
            }
        }

        $appendedArray = [];
        foreach ($csvHeaderArray as $csvColumnNameStr) {
            $appendedArray[] = $array[$csvColumnNameStr] ?? 'Undefined';
        }

        $fseekCodeInt = fseek($file, 0, SEEK_END);
        if (-1 === $fseekCodeInt) {
            throw new Exception('Could not move pointer to the end of the CSV file.');
        }
        $fwriteCodeInt = fputcsv($file, $appendedArray);
        if (false === $fwriteCodeInt) {
            throw new Exception('Could not append line to CSV');
        }
    }
    finally {
        if (null !== $file) {
            fclose($file);
        }
    }
}
